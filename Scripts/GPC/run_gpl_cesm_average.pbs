#/bin/bash

## queue/PBS settings
#PBS -l nodes=1:ppn=8
# batch queue: nodes=1:m32g:ppn=8
# largemem queue: nodes=1:m128g:ppn=16
#PBS -l walltime=48:00:00
# merge standard error and output stream
#PBS -j oe
#PBS -o $PBS_JOBNAME.$PBS_JOBID.out
# send email if abort (nbae)
#PBS -M aerler@atmosp.physics.utoronto.ca
#PBS -m ae
# job name
#PBS -N gpl_cesmavg_all
## submit to queue (NB: this has to be the last PBS line!)
# batch (default), debug, largemem
#PBS -q batch

# load modules (we need to load the netcdf module in order to use it in Python)
echo
module purge
module load intel/13.1.1 gcc/4.8.1 hdf5/187-v18-serial-intel netcdf/4.1.3_hdf5_serial-intel gnu-parallel/20130422  
module load python/2.7.3 gdal/1.9.2 extras/64_6.4 ncl/6.2.0 gsl/1.13-intel udunits/2.1.11 nco/4.3.2-intel
module list
echo

shopt -s extglob

# default settings
JOBNAME=${PBS_JOBNAME:-'test'}
WORKDIR=${PBS_O_WORKDIR:-"${PWD}"}
PYAVG='cesm_average.py' # averaging script
CMDFILE="${WORKDIR}/cmdfile.${JOBNAME}"
rm -f "${CMDFILE}" # clean...

#SRCR='/reserved1/p/peltier/marcdo/FromHpss' # Marc's folder on reserved (default)
#SRCR='/scratch/p/peltier/marcdo/archive/' # Marc's folder on scratch
SRCR=${SRCR:-"/reserved1/p/peltier/aerler//CESM/archive/"} # my CESM archive folder as source
DSTR=${DSTR:-"/reserved1/p/peltier/aerler//CESM/archive/"} # my CESM archive folder as destination (always)

# for tests
#RUNS='seaice-3r-hf/'
#PERIODS='5' # averaging periods
# historical runs and projections
RUNS=${RUNS:-'@(h[abc]|t)b20trcn1x1/ h[abct]brcp85cn1x1/ h[abc]brcp85cn1x1d/ seaice-*-hf/'}
PERIODS=${PERIODS:-'5 10 15'} # averaging periods
# cesm_average settings
CONCAT=${CONCAT:-'CONCAT'} # concatenate monthly files
AVERAGE=${AVERAGE:-'AVERAGE'} # compute climatologies
OVERWRITE=${OVERWRITE:-'FALSE'} # recompute or not
FILETYPES=${FILETYPES:-'atm lnd ice'} # file types to process

# feedback
echo ''
echo 'Averaging CESM experiments:'
echo ''
ls -d $RUNS
echo ''
echo "Concatenate Output: ${CONCAT}"
echo "Average Output: ${AVERAGE}"
[[ "${AVERAGE}" == 'AVERAGE' ]] && echo "Averaging Periods: ${PERIODS}"
echo "File Types: ${FILETYPES}"
echo "Overwriting Files: ${OVERWRITE}"


## generate command file for GNU Parallel
# root directory
cd "${WORKDIR}"
# loop over runs
for RUN in $RUNS
  do
    echo
    # set up folders
    RUN=${RUN%/} # remove trailing slash, if any
    RUNDIR="${WORKDIR}/${RUN}/" # extract highest order folder name as run name
    AVGDIR="${RUNDIR}/cesmavg/" # subfolder for averages
    echo "   ***   Checking $RUN   ***   "
    echo "   ($RUNDIR)" 
    cd "${RUNDIR}"
    mkdir -p "${AVGDIR}" # make sure destination folder exists
    ln -sf "${MODEL_ROOT}/WRF Tools/Python/average/cesm_average.py" # link archiving script
    # determine period from name
    if [[ "$RUN" == *20tr* ]]; then START='1979'
    elif [[ "$RUN" == *rcp*d ]]; then START='2085'
    elif [[ "$RUN" == *rcp* ]]; then START='2045'
    elif [[ "$RUN" == seaice-5r-hf ]]; then START='2045 2085'
    elif [[ "$RUN" == seaice-*-hf ]]; then START='2045'
    fi # if it doesn't match anything, it will be skipped
    # calculate periods
    PRDS='' # clear variable
    for S in $START; do
      for PRD in $PERIODS; do
        PRDS="${PRDS} ${S}-$(( $S + $PRD ))"
    done; done # loop over start dates and periods
    # loop iver file types
		for FILETYPE in $FILETYPES
      do
		    if [[ "${CONCAT}" == 'CONCAT' ]]
          then
		        ## assemble time-series
				    case $FILETYPE in
				      atm) FILES="${RUNDIR}/${FILETYPE}/hist/${RUN}.cam2.h0.";; 
				      lnd) FILES="${RUNDIR}/${FILETYPE}/hist/${RUN}.clm2.h0.";; 
				      ice) FILES="${RUNDIR}/${FILETYPE}/hist/${RUN}.cice.h.";; 
				    esac
				    # NCO command
				    NCOARGS="--netcdf4 --deflate 1" # use NetCDF4 compression
		        NCOOUT="${AVGDIR}/cesm${FILETYPE}_monthly.nc"
				    if [[ ! -e "${NCOOUT}" ]] || [[ "$OVERWRITE" == 'OVERWRITE' ]]; then
				      echo "   Concatenating: ${NCOOUT}"
		          echo "cd ${RUNDIR}; ncrcat $NCOARGS --output "${NCOOUT}" --overwrite ${FILES}* &> ${NCOOUT%.nc}.log" >> "${CMDFILE}"
				    else
				      echo "   Skipping: ${NCOOUT}"
				    fi # if already file exits
        fi # $CONCAT
        if [[ "${AVERAGE}" == 'AVERAGE' ]]
          then
				    # loop over averaging periods
		        for PERIOD in $PRDS
		          do
		            ## compute averaged climatologies
		            # launch python script, save output in log file
		            PYAVGOUT="${AVGDIR}/cesm${FILETYPE}_clim_${PERIOD}.nc"
		            if [[ ! -e "$PYAVGOUT" ]] || [[ "$OVERWRITE" == 'OVERWRITE' ]]; then
		              echo "   Averaging: ${PYAVGOUT}"
			            echo "cd ${RUNDIR}; export PYAVG_FILETYPE=${FILETYPE}; python -u cesm_average.py ${PERIOD} &> ${PYAVGOUT%.nc}.log" >> "${CMDFILE}"
		            else
		              echo "   Skipping: ${PYAVGOUT}"
		            fi # if already file exits
		        done # for $PERIODS
        fi # $AVERAGE
    done # for $FILETYPES
done # for $RUNS
echo 

## execute GNU Parallel commands
parallel -j 8 < "${CMDFILE}"
ERR=$? # capture exit code

# clean up
echo
if [[ 0 == ${ERR} ]]
  then
    echo '   ***   All Jobs Completed Successfully!!!   ***   '
    rm "${CMDFILE}"
  else
    echo "  >>>   ERRORS DETECTED - EXIT CODE ${ERR}   <<<   " 
    echo "inspect command file ${PBS_O_WORKDIR}/cmdfile.tmp"
fi # if $ERR
echo

# exit with gnuparallel exit code
exit ${ERR}
