#!/bin/bash
#MOAB/Torque submission script for SciNet GPC

## queue/PBS settings
#PBS -l nodes=1:m32g:ppn=8
#PBS -l walltime=1:00:00
# merge standard error and output stream
#PBS -j oe
#PBS -o $PBS_JOBNAME.$PBS_JOBID.out
# send email if abort (nbae)
#PBS -M aerler@atmosp.physics.utoronto.ca
#PBS -m a
# job name
#PBS -N cycling_WPS
## submit to queue (NB: this has to be the last PBS line!)
# batch (default), debug, largemem
#PBS -q batch

set -e # abort if anything goes wrong
# check if $NEXTSTEP is set, and exit, if not
if [[ -z "${NEXTSTEP}" ]]; then
  echo 'Environment variable $NEXTSTEP not set - aborting!'
  exit 1
fi
CURRENTSTEP="${NEXTSTEP}" # $NEXTSTEP will be overwritten

## job settings
export SCRIPTNAME="run_cycling_WPS.pbs" # WPS suffix assumed
export CLEARWDIR=0 # do not clear working director
# run configuration
export NODES=1 # only one for WPS!
export TASKS=16 # number of MPI task per node (Hpyerthreading?)
export THREADS=1 # number of OpenMP threads
# directory setup
export INIDIR="${PBS_O_WORKDIR}"
export RUNNAME="${CURRENTSTEP}" # step name, not job name!
export WORKDIR="${INIDIR}/${RUNNAME}/"

## WPS settings
# optional arguments $RUNPYWPS, $RUNREAL, $RAMIN, $RAMOUT
export RUNPYWPS=1
export RUNREAL=1
# RAM-disk settings: infer from queue
if [[ "${PBS_QUEUE}" == 'largemem' ]]; then
  export RAMIN=1
  export RAMOUT=1
  RAMMSG="Running on ${PBS_QUEUE} queue; using RAM disk for input and output." # displayed later
else
  export RAMIN=1
  export RAMOUT=0
  RAMMSG="Running on ${PBS_QUEUE} queue; using hard disk for input only." # displayed later
fi # PBS_QUEUE
# folders: $METDATA, $REALIN, $REALOUT
export METDATA="" # to output metgrid data set "ldisk = True" in meta/namelist.py
export REALOUT="${WORKDIR}" # this should be default anyway

# setup environment
cd "${INIDIR}"
source setup_GPC.sh # load machine-specific stuff


## begin job

# launch feedback etc.
echo
hostname
uname
echo
echo "   ***   ${PBS_JOBNAME}   ***   "
echo
echo "${RAMMSG}" # display message from before

# prepare directory
cd "${INIDIR}"
./prepWorkDir.sh # don't remove working directory ($CLEARWDIR=0)


## run WPS for this step
# start timing
echo
echo "   ***   Launching WPS for current step: ${CURRENTSTEP}   ***   "
date
echo

# run WPS driver script
cd "${INIDIR}"
./execWPS.sh
ERR=$? # capture exit code
# mock input files for testing
#if [[ -n "${NEXTSTEP}" ]]; then
#	touch "${WORKDIR}/wrfinput_d01"
#	touch "${WORKDIR}/wrfinput_d02"
#fi

if [[ $ERR != 0 ]]; then
  # end timing
  echo
  echo "   ###   WARNING: WRF step ${CURRENTSTEP} failed   ###   "
  date
  echo
  exit ${ERR} # abort if error occured!
fi # if error

# end timing
echo
echo "   ***   WPS step ${CURRENTSTEP} completed   ***   "
date
echo

# copy driver script into work dir to signal completion
cp "${INIDIR}/${SCRIPTNAME}" "${WORKDIR}"
