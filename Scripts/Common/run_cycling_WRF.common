#!/bin/bash

###                                                                                     ##
###   ***   Everything below this line was inserted from run_cycling_WRF.common   ***   ##
###                                                                                     ##


# The following environment variables have to be set by now:
# JOBNAME, INIDIR, NODES, TASKS, THREADS
# WRFSCRIPT, WPSSCRIPT, ARSCRIPT, SCRIPTDIR, BINDIR
# Optional: WAITFORWPS, ARINTERVAL

set -e # abort if anything goes wrong

# launch feedback
echo
hostname
uname
echo
echo "   ***   ${JOBNAME}   ***   "
echo

# check if $NEXTSTEP is set, and exit, if not
if [[ -z "${NEXTSTEP}" ]]; then
  echo 'Environment variable $NEXTSTEP not set - aborting!'
  exit 1
fi
CURRENTSTEP="${NEXTSTEP}" # $NEXTSTEP will be overwritten
export NEXTSTEP
export CURRENTSTEP

# more WRF settings (before machine setup!)
export RUNWRF=1 # more options: $WRFIN, $WRFOUT, $TABLES
export RSTDIR="${WRFOUT}" # also needed to link restart files
export RUNREAL=0 # more options: $RUNREAL, $RAMIN, $RAMOUT, $REALIN, $REALOUT

# setup job environment
cd "${INIDIR}"
source "${SCRIPTDIR}/setup_WRF.sh" # load machine-specific stuff


## run WPS/pre-processing for next step
# read next step from stepfile
NEXTSTEP=$(python "${SCRIPTDIR}/cycling.py" "${CURRENTSTEP}")

# launch pre-processing for next step
eval "${SCRIPTDIR}/launchPreP.sh" # primarily for WPS and real.exe


## run WRF for this step
# start timing
echo
echo "   ***   Launching WRF for current step: ${CURRENTSTEP}   ***   "
date
echo

# N.B.: work in existing working folder, created by caller instance;
# i.e. don't remove namelist files in working directory!

# run execution script
eval "${SCRIPTDIR}/execWRF.sh"
ERR=$? # capture exit code
# mock restart files for testing (correct linking)
# ERR=0 # pretend execution was successful
#if [[ -n "${NEXTSTEP}" ]]; then
#	touch "${WORKDIR}/wrfrst_d01_${NEXTSTEP}_00"
#	touch "${WORKDIR}/wrfrst_d01_${NEXTSTEP}_01"
#fi

## check exit code and abort if error occurred
if [[ $ERR != 0 ]]; then
  # end timing
  echo
  echo "   ###   WARNING: WRF step ${CURRENTSTEP} failed   ###   "
  date
  echo
  exit ${ERR}
fi # if error

# end timing
echo
echo "   ***   WRF step ${CURRENTSTEP} completed   ***   "
date
echo


## launch post-processing
eval "${SCRIPTDIR}/launchPostP.sh" # mainly archiving, but may include actual post-processing


## resubmit job for next step
eval "${SCRIPTDIR}/resubJob.sh" # requires submission command from setup script


# copy driver script into work dir to signal completion
cp "${INIDIR}/${WRFSCRIPT}" "${WORKDIR}"
