#!/bin/bash
#MOAB/Torque archiving script for SciNet HPSS

## queue/PBS settings
# 72h is maximum for long queue, 1h for short
#PBS -l walltime=1:00:00
# merge standard error and output stream
#PBS -j oe
#PBS -o $PBS_JOBNAME.$PBS_JOBID.out
##PBS -e $PBS_JOBNAME.$PBS_JOBID.err
# send email if abort (nbae)
#PBS -M aerler@atmosp.physics.utoronto.ca
#PBS -m ae
# job name
#PBS -N ar_test
## submit to queue (NB: this has to be the last PBS line!)
#PBS -q archive

set -o pipefail # through error (in exit code) if pipe fails 
trap "echo 'Job script not completed';exit 129" TERM INT
# Note that your initial directory in HPSS will be /archive/$(id -gn)/$(whoami)/

## definitions
BACKUP=${BACKUP:-'NO'} # set to 'BACKUP'
RMSRC=${RMSRC:-'NO'} # set to 'RMSRC'
# N.B.: do not edit these variable; instead pass them as environment variables
# data folder
DST="${ARCHIVE}/Downscaling/${PBS_O_WORKDIR##*/}" # remove parent folder (= run name)
SRC="${PBS_O_WORKDIR}/wrfout/" 
# if no dates given, process all datasets in current directory
cd "${SRC}"
if [[ -z "${DATES}" ]]; then DATES=$( ls ????-??_wrf.tgz ); fi # if no $DATES 

## function to verify the contents of an HTAR archive
function VERIFYHTAR () {
  local HTAR=${1} # archive file (absolute pass on HPSS)
  local FILES=${2} # 
  local LIST=$( htar -vtf "${HTAR}" | awk '{print $7}' ) # column 7 are the file names
  local MISS=0 # missing file counter
  # loop over files in list and check presence in HTAR list
  for FILE in ${FILES}; do
    if [[ "${FILE}" == $( echo "${LIST}" | sed -n "/${FILE}/p" ) ]]; then
      if [[ "${RMSRC}" == 'RMSRC' ]]; then
        echo "   >>> removing ${FILE}"
        rm "${FILE}"
      fi
    else
      MISS=$(( ${MISS} + 1 ))
      echo "WARNING: File ${FILE} missing in archive ${HTAR}"
    fi
  done
  # return number of missing files
  return ${MISS}    
}

## function to create a new HTAR archive
function MAKEHTAR () {
  local HTAR="${DST}/${1}" # archive file (absolute pass on HPSS)
  local FILES=${2} #
  # make backup (if desired)
  if [[ ${BACKUP} == 'BACKUP' ]]; then 
    # check if archive already exists
    hsi ls "${HTAR}"
    echo "${FILES}   >>>   ${HTAR}" # print feedback
    if [[ $? == 0 ]]; then
      echo "Warning: archive ${HTAR} already exists - checking contents."
      VERIFYHTAR "${HTAR}" "${FILES}" # check contents
      if [[ $? == 0 ]]; then
        echo "   Archive OK, skipping backup..."
        return 0
      else
        echo "   Archive contents are different - removing old archive and creating new."
        hsi rm "${HTAR}"
      fi
    else
    fi
    htar -cpf "${HTAR}" -Hcrc -Hverify=1 ${FILES} # /scinet/gpc/bin/ish?
  else
    echo "${HTAR}   :::   ${FILES}" # print feedback
  fi
  # verify contents and return result
  VERIFYHTAR "${HTAR}" "${FILES}"
  # N.B.: VERIFYHTAR also deletes the source file, if desired
  return $?
}

## function to to back up one output dataset
function BACKUPDATASET () {
  local DATE="${1}"
  local ERR=0 # error counter
  # files to be backed up
  local LOGS="${DATE}_pyWPS.tgz ${DATE}_real.tgz ${DATE}_wrf.tgz wrfconst_d01.nc wrfconst_d02.nc"
  local DIAGS="wrfxtrm_d01_${DATE}-01_00:00:00.nc wrfsrfc_d01_${DATE}-01_00:00:00.nc wrfplev3d_d01_${DATE}-01_00:00:00.nc wrfxtrm_d02_${DATE}-01_00:00:00.nc wrfsrfc_d02_${DATE}-01_00:00:00.nc wrfplev3d_d02_${DATE}-01_00:00:00.nc"
  local DYN_D1="wrfdrydyn3D_d01_${DATE}-01_00:00:00.nc"
  local DYN_D2="wrfdrydyn3D_d02_${DATE}-01_00:00:00.nc"
  local MISC_D1="wrfmoist3D_d01_${DATE}-01_00:00:00.nc wrflsm_d01_${DATE}-01_00:00:00.nc wrfrad_d01_${DATE}-01_00:00:00.nc wrfhydro_d01_${DATE}-01_00:00:00.nc wrffdda_d01_${DATE}-01_00:00:00.nc"
  local MISC_D2="wrfmoist3D_d02_${DATE}-01_00:00:00.nc wrflsm_d02_${DATE}-01_00:00:00.nc wrfrad_d02_${DATE}-01_00:00:00.nc wrfhydro_d02_${DATE}-01_00:00:00.nc"
  echo
  # check or backup?
  if [[ ${BACKUP} == 'BACKUP' ]]
    then echo "   ***   BACKUP ${DATE}   ***   "
    else echo "   ***   CHECK ${DATE}   ***   "
  fi
  # delete source or not?
  if [[ ${RMSRC} == 'RMSRC' ]]
    then echo " + Removing source files after backup! + "
    else echo "   (leaving source files on untouched)   "
  fi
  # process file lists
  echo '  Pressure level and surface fields, log files (both domains):' # short description of archive
  MAKEHTAR "wrfdiags_${DATE}.tar" "${DIAGS} ${LOGS}"
  ERR=$(( ${ERR} + $? )) # VERIFYHTAR returns the number of missing files as exit code
  echo '  Miscellaneous field, including 3D moisture (outer domain):'
  MAKEHTAR "wrfmisc_d01_${DATE}.tar" "${MISC_D1}"
  ERR=$(( ${ERR} + $? ))
  echo '  Miscellaneous field, including 3D moisture (inner domain):'
  MAKEHTAR "wrfmisc_d02_${DATE}.tar" "${MISC_D2}"
  ERR=$(( ${ERR} + $? ))
  echo '  3D dry dynamics fields (outer domain):'
  MAKEHTAR "wrfdrydyn_d01_${DATE}.tar" "${DYN_D1}"
  ERR=$(( ${ERR} + $? ))
  echo '  3D dry dynamics fields (inner domain):'
  MAKEHTAR "wrfdrydyn_d02_${DATE}.tar" "${DYN_D2}"
  ERR=$(( ${ERR} + $? ))
  # check for errors
  if [ ! ${ERR} == 0 ]; then
    echo "   >>>   WARNING: there were ${ERR} errors!   <<<   "
    return 1
  else
    echo 'Backup OK!'
    return 0
  fi
}

## execution
# set up directories
hsi mkdir -p "${DST}"
cd "${SRC}"

# set counter
ERRORS=0
TRANSFERS=0
# cycle over monthly output datasets
for DATE in ${DATES} # use WRF log-files as indicator
do
  DATE=${DATE%_wrf.tgz} # extract date (no effect if only date)
  time -p BACKUPDATASET ${DATE}
  if [ $? == 0 ]; then TRANSFERS=$(( ${TRANSFERS} + 1 ))
  else ERRORS=$(( ${ERRORS} + 1 )); fi
done
hsi -q ls "${DST}"
 
trap - TERM INT
 
if [ ! ${ERRORS} == 0 ]; then
  echo
  echo "   >>>   WARNING: THERE WERE ${ERRORS} ERRORS!   <<<   "
  echo "   >>>        ${TRANSFERS} TRANSFERS OK   <<<   "
  # /scinet/gpc/bin/exit2msg ${ERRORS} # translate exit codes to human-readable messages
  exit ${ERRORS}
else
  echo
  echo "   <<<   ALL ${TRANSFERS} TRANSFERS OK   >>>   "
fi
