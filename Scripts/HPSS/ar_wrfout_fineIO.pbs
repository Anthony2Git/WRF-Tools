#!/bin/bash
#MOAB/Torque archiving script for SciNet HPSS

## queue/PBS settings
# 72h is maximum for long queue, 1h for short
#PBS -l walltime=3:00:00
# merge standard error and output stream
#PBS -j oe
#PBS -o $PBS_JOBNAME.$PBS_JOBID.out
##PBS -e $PBS_JOBNAME.$PBS_JOBID.err
# send email if abort (nbae)
#PBS -M aerler@atmosp.physics.utoronto.ca
#PBS -m a
# job name
#PBS -N ar_test
## submit to queue (NB: this has to be the last PBS line!)
#PBS -q archive

set -o pipefail # through error (in exit code) if pipe fails 
trap "echo 'Job script not completed';exit 129" TERM INT
# Note that your initial directory in HPSS will be /archive/$(id -gn)/$(whoami)/

## definitions
# operation to perform: CHECK, LIST, REMOVE, BACKUP, RETRIEVE
MODE=${MODE:-'BACKUP'} # default operation: 'BACKUP'
RMSRC=${RMSRC:-'NO'} # set to 'RMSRC' to actually perform deletion
# N.B.: do not edit these variable; instead pass them as environment variables
DATASET=${DATASET:-'FULL'} # default dataset: everything
# N.B.: the datasets are defined in PROCESSDATASET below
# data folder
DST="${ARCHIVE}/${PBS_O_WORKDIR#/*/$(whoami)/}" # replicate directory tree  
# replace things like '/scratch/g/group/user/' with $ARCHIVE
SRC="${PBS_O_WORKDIR}/wrfout/" # output folder... where data is

# use this filename pattern to infer list of $TAGS
PATTERN='_wrf.tgz' # filename "${TAG}${PATTERN}": remove $PATTERN, keep $TAG
# if no tags are given, use file pattern to guess
if [[ -z "${TAGS}" ]] && [[ -n "${PATTERN}" ]]; then 
	cd "${SRC}"
	T=''; for T in $( ls *${PATTERN} ); do 
		T="${T} ${TAG%${PATTERN}}" # extract $TAG from filename
	done
fi # if no $TAGS 

## function to verify the contents of an HTAR archive
function CHECKHTAR () {
  local HTAR="${DST}/${1}" # archive file (absolute path on HPSS)
  local FILES=${2} # list of files that should be in the archive
  local QUIET="${3}" # suppress positive output (still print missing files!)
  local LIST=$( htar -vtf "${HTAR}" | awk '{print $7}' ) # column 7 are the file names
  local MISS=0 # missing file counter
  # print expected archive contents
  if [[ "${QUIET}" != 'QUIET' ]]; then
	echo "${HTAR}   :::   ${FILES}" # print feedback
  fi
  # loop over files in list and check presence in HTAR list
  for FILE in ${FILES}; do
    if [[ "${FILE}" != $( echo "${LIST}" | sed -n "/${FILE}/p" ) ]]; then
      if [[ ${MISS} == 0 ]]; then echo; fi # visually offset missing file list
      echo "WARNING: File ${FILE} missing in archive ${HTAR}"
      MISS=$(( ${MISS} + 1 ))
    fi
  done
  if [[ ${MISS} != 0 ]]; then echo; fi # visually offset missing file list
  # return number of missing files
  return ${MISS}    
}

## function to list contents of HTAR archive
function LISTHTAR () {
  local HTAR="${DST}/${1}" # archive file (absolute path on HPSS)
  local MISS=0 # error code
  echo "${HTAR} ::: *" # print feedback
  # check if archive exists
  hsi -q ls "${HTAR}" # quiet mode
  if [[ $? != 0 ]]; then
	echo "Warning: archive ${HTAR} does not exist."
	MISS=1
  else
    # list archive contents
	htar -tvf "${HTAR}" -Hcrc -Hverify=1
	MISS=$? 	
  fi
  # return exit code
  return ${MISS}
}

## function to verify contents of HTAR archive
function VERIFYHTAR () {
  local HTAR="${DST}/${1}" # archive file (absolute path on HPSS)
  local MISS=0 # error code
  echo "${HTAR} ::: *" # print feedback
  # check if archive exists
  hsi -q ls "${HTAR}" # quiet mode
  if [[ $? != 0 ]]; then
	echo "Warning: archive ${HTAR} does not exist."
	MISS=1
  else
    # list archive contents
	htar -Kvf "${HTAR}" -Hcrc -Hverify=1
	MISS=$? 	
  fi
  # return exit code
  return ${MISS}
}

## function to remove source files of an HTAR archive
function REMOVEHTAR () {
  local HTAR="${DST}/${1}" # archive file (absolute path on HPSS)
  local FILES=${2} # list of files that should be in the archive 
  local LIST=$( htar -vtf "${HTAR}" | awk '{print $7}' ) # column 7 are the file names
  local MISS=0 # missing file counter
  # print expected archive contents
  echo "${HTAR}   ---   ${FILES}" # print feedback
  # loop over files in list and check presence in HTAR list
  for FILE in ${FILES}; do
    if [[ "${FILE}" == $( echo "${LIST}" | sed -n "/${FILE}/p" ) ]]; then
      if [[ "${RMSRC}" == 'RMSRC' ]]; then # additional safety check
        echo "   >>> removing ${FILE}"
        rm "${FILE}"
      else
    	echo "   >>> would remove ${FILE}, if RMSRC='RMSRC' was set..."
      fi # RMSRC
    else
      if [[ ${MISS} == 0 ]]; then echo; fi # visually offset missing file list
      echo "WARNING: File ${FILE} missing in archive ${HTAR}"
      echo "   >>> not deleting ${FILE}"
      MISS=$(( ${MISS} + 1 ))
    fi
  done
  if [[ ${MISS} != 0 ]]; then echo; fi # visually offset missing file list
  # return number of missing files
  return ${MISS}    
}

## function to create a new HTAR archive
function BACKUPHTAR () {
  local HTAR="${DST}/${1}" # archive file (absolute path on HPSS)
  local FILES=${2} #
  # check if archive already exists
  echo "${FILES}   >>>   ${HTAR}" # print feedback
  hsi -q ls "${HTAR}" # quiet mode
  if [[ $? == 0 ]]; then
    echo "Warning: archive ${HTAR} already exists - checking contents."
    CHECKHTAR "${1}" "${2}" 'QUIET' # check contents
    if [[ $? == 0 ]]; then
      echo "   Archive OK, skipping backup..."
      return 0
    else
      echo "   Archive contents are different - removing old archive and creating new."
      hsi -q rm "${HTAR}"
    fi
  fi
  # create archive
  htar -cpf "${HTAR}" -Hcrc -Hverify=1 ${FILES}
  # verify contents and return result
  CHECKHTAR "${1}" "${2}" 'QUIET'
  # N.B.: CHECKHTAR also deletes the source file, if desired
  return $?
}

## function to create a new HTAR archive
function RETRIEVEHTAR () {
  local HTAR="${DST}/${1}" # archive file (absolute path on HPSS)
  local FILES=${2} # list of files to extract
  local MISS=0 # missing files 
  echo "${HTAR}   >>>   ${FILES}" # print feedback
  # check if archive exists
  hsi -q ls "${HTAR}" # quiet mode
  if [[ $? != 0 ]]; then
	echo "Warning: archive ${HTAR} does not exist."
	return 1
  else
    CHECKHTAR "${1}" "${2}" 'QUIET' # check contents
	MISS=$? # number of missing files
    if [[ ${MISS} == 0 ]]; then
      echo "Archive ${HTAR} exists - contents OK."
    else
	  echo "${MISS} files missing in archive ${HTAR} - aborting!" 
	  # missing files should be listed by CHECKHTAR
    fi
  fi
  # create archive
  htar -cpf "${HTAR}" -Hcrc -Hverify=1 ${FILES}
  # verify contents and return result
  return $?
}

## function to back up one output dataset
function PROCESSDATASET () {
  local DATE="${1}"
  local ERR=0 # error counter
  ## define datasets
  # full backup
  if [[ "${DATASET}" == 'FULL' ]]; then 
    local STATIC="static.tgz wrfconst_d01.nc wrfconst_d02.nc" # only on cold start, otherwise skip
    local LOGS="${DATE}_pyWPS.tgz ${DATE}_real.tgz ${DATE}_wrf.tgz"
    local DIAGS="wrfxtrm_d01_${DATE}-01_00:00:00.nc wrfsrfc_d01_${DATE}-01_00:00:00.nc wrfplev3d_d01_${DATE}-01_00:00:00.nc wrfxtrm_d02_${DATE}-01_00:00:00.nc wrfsrfc_d02_${DATE}-01_00:00:00.nc wrfplev3d_d02_${DATE}-01_00:00:00.nc"
    local DYN_D1="wrfdrydyn3d_d01_${DATE}-01_00:00:00.nc"
    local DYN_D2="wrfdrydyn3d_d02_${DATE}-01_00:00:00.nc"
    local MISC_D1="wrfmoist3d_d01_${DATE}-01_00:00:00.nc wrflsm_d01_${DATE}-01_00:00:00.nc wrfrad_d01_${DATE}-01_00:00:00.nc wrfhydro_d01_${DATE}-01_00:00:00.nc wrffdda_d01_${DATE}-01_00:00:00.nc"
    local MISC_D2="wrfmoist3d_d02_${DATE}-01_00:00:00.nc wrflsm_d02_${DATE}-01_00:00:00.nc wrfrad_d02_${DATE}-01_00:00:00.nc wrfhydro_d02_${DATE}-01_00:00:00.nc"
  elif [[ "${DATASET}" == 'MISC3D' ]]; then
    local DYN_D1="wrfdrydyn3d_d01_${DATE}-01_00:00:00.nc"
    local DYN_D2="wrfdrydyn3d_d02_${DATE}-01_00:00:00.nc"
    local MISC_D1="wrfmoist3d_d01_${DATE}-01_00:00:00.nc wrflsm_d01_${DATE}-01_00:00:00.nc wrfrad_d01_${DATE}-01_00:00:00.nc wrffdda_d01_${DATE}-01_00:00:00.nc"
    local MISC_D2="wrfmoist3d_d02_${DATE}-01_00:00:00.nc wrflsm_d02_${DATE}-01_00:00:00.nc wrfrad_d02_${DATE}-01_00:00:00.nc"
  elif [[ "${DATASET}" == 'DYN3D' ]]; then
    local DYN_D1="wrfdrydyn3d_d01_${DATE}-01_00:00:00.nc"
    local DYN_D2="wrfdrydyn3d_d02_${DATE}-01_00:00:00.nc"
  elif [[ "${DATASET}" == 'D13D' ]]; then
    local DYN_D1="wrfdrydyn3d_d01_${DATE}-01_00:00:00.nc"
    local MISC_D1="wrfmoist3d_d01_${DATE}-01_00:00:00.nc wrflsm_d01_${DATE}-01_00:00:00.nc wrfrad_d01_${DATE}-01_00:00:00.nc wrffdda_d01_${DATE}-01_00:00:00.nc"
  elif [[ "${DATASET}" == 'D23D' ]]; then
    local DYN_D2="wrfdrydyn3d_d02_${DATE}-01_00:00:00.nc"
    local MISC_D2="wrfmoist3d_d02_${DATE}-01_00:00:00.nc wrflsm_d02_${DATE}-01_00:00:00.nc wrfrad_d02_${DATE}-01_00:00:00.nc"
  elif [[ "${DATASET}" == 'LOGS' ]]; then 
    local STATIC="static.tgz wrfconst_d01.nc wrfconst_d02.nc" # only on cold start, otherwise skip
    local LOGS="${DATE}_pyWPS.tgz ${DATE}_real.tgz ${DATE}_wrf.tgz"
  fi # $DATASET  
  # only large and unnecessary files
  # determine if this is a cold start or a restart
  if [[ -e "${SRC}/wrfrst_d01_${DATE}-01_00:00:00" ]]; then
    # restart run: backup restart file
	if [[ -n "${MISC_D1}" ]]; then MISC_D1="${MISC_D1} wrfrst_d01_${DATE}-01_00:00:00"; fi
	if [[ -n "${MISC_D2}" ]]; then MISC_D2="${MISC_D2} wrfrst_d02_${DATE}-01_00:00:00"; fi
    unset STATIC # skip this step
    # cold start: backup data tables, constants, and geogrid files
  fi
  echo
  # operation feedback
  echo "   ***   ${MODE} ${DATE}   ***   "
  # delete source or not?
  if [[ ${RMSRC} == 'RMSRC' ]]
    then echo " + Removing source files after backup! + "
    else echo "   (leaving source files untouched)   "
  fi
  echo
  ## process file lists (skip empty ones)
  if [[ -n "${STATIC}" ]]; then
    # only execute this for the first step/date (cold start)
    echo '  Static data, WRF constants, and geogrid files (both domains):'
    "${MODE}HTAR" "wrfstatic.tar" "${STATIC}"
    ERR=$(( ${ERR} + $? ))
  fi; if [[ -n "${DIAGS}" ]]; then
	echo '  Pressure level and surface fields, log files (both domains):' # short description of archive
	"${MODE}HTAR" "wrfdiags_${DATE}.tar" "${DIAGS} ${LOGS}"
	ERR=$(( ${ERR} + $? )) # CHECKHTAR returns the number of missing files as exit code
  fi; if [[ -n "${MISC_D1}" ]]; then 
	echo '  Miscellaneous field, including 3D moisture (outer domain):'
	"${MODE}HTAR" "wrfmisc_d01_${DATE}.tar" "${MISC_D1}"
	ERR=$(( ${ERR} + $? ))
  fi; if [[ -n "${MISC_D2}" ]]; then
	echo '  Miscellaneous field, including 3D moisture (inner domain):'
	"${MODE}HTAR" "wrfmisc_d02_${DATE}.tar" "${MISC_D2}"
	ERR=$(( ${ERR} + $? ))
  fi; if [[ -n "${DYN_D1}" ]]; then	
	echo '  3D dry dynamics fields (outer domain):'
	"${MODE}HTAR" "wrfdrydyn_d01_${DATE}.tar" "${DYN_D1}"
	ERR=$(( ${ERR} + $? ))
  fi; if [[ -n "${DYN_D2}" ]]; then
	echo '  3D dry dynamics fields (inner domain):'
	"${MODE}HTAR" "wrfdrydyn_d02_${DATE}.tar" "${DYN_D2}"
	ERR=$(( ${ERR} + $? ))
  fi
  # check for errors
  if [ ! ${ERR} == 0 ]; then
    echo "   >>>   WARNING: there were ${ERR} errors!   <<<   "
    return 1
  else
    echo "${MODE} OK!"
    return 0
  fi
}

## execution
# set up directories
hsi mkdir -p "${DST}"
cd "${SRC}"

# set counter
ERRORS=0
OPERATIONS=0
# cycle over monthly output datasets
for TAG in ${TAGS} # use WRF log-files as indicator
do  
  time -p PROCESSDATASET ${TAG}
  if [ $? == 0 ]; then OPERATIONS=$(( ${OPERATIONS} + 1 ))
  else ERRORS=$(( ${ERRORS} + 1 )); fi
  echo
  echo '   ==========================================================================   '
  echo
done
hsi -q ls "${DST}"
 
trap - TERM INT
 
echo
if [ ${ERRORS} == 0 ]; then
  echo "   <<<   ALL ${OPERATIONS} OPERATIONS OK   >>>   "
else
  echo "   >>>   WARNING: ${ERRORS} OPERATIONS FAILD OR INCOMPLETE!   <<<   "
  echo "   >>>                 ${OPERATIONS} OPERATIONS OK             <<<   "
  # /scinet/gpc/bin/exit2msg ${ERRORS} # translate exit codes to human-readable messages
  exit ${ERRORS}
fi
echo
